require('dotenv').config()
const { Bot, Keyboard, InlineKeyboard, GrammyError, HttpError } = require('grammy');
const {hydrate } = require('@grammyjs/hydrate')
const bot = new Bot(process.env.BOT_API_KEY)

bot.use(hydrate());

// 21.03.24

const linkArray =  [
    'https://ibb.co/8mCPz7q',
    'https://ibb.co/9GkvyVy',
    'https://ibb.co/k5mbsgz',
    'https://ibb.co/2WTtW0g',
    'https://ibb.co/8mCPz7q',
    'https://ibb.co/0h6jv9x',
    'https://ibb.co/g70nLzX',
    'https://ibb.co/5W3Xbfs',
    'https://ibb.co/Jtr8JLp',
    'https://ibb.co/ss77Pqh',
    'https://ibb.co/mzzyS6N',
    'https://ibb.co/zWvMnQf',
    'https://ibb.co/Jtr8JLp',
    'https://ibb.co/CQg6t6L',
    'https://ibb.co/qW02h7t',
    'https://ibb.co/zWvMnQf',
    'https://ibb.co/k5mbsgz',
    'https://ibb.co/YN2m4Dw',
    'https://ibb.co/j3MmTyx',
    'https://ibb.co/9GkvyVy',
    'https://ibb.co/q7V4Kgn',
    'https://ibb.co/tK5X76c',
    'https://ibb.co/CP84CRd',
    'https://ibb.co/7NSTQ1K',
    'https://ibb.co/F0JGZbz',
    'https://ibb.co/PzgGVpR',
    'https://ibb.co/FxL7tQ0',
    'https://ibb.co/5nfLWNd',
    'https://ibb.co/wzn54V1',
    'https://ibb.co/jLCvrWm',
    'https://ibb.co/PMcw0Vz',

  ];
  






bot.command('start', async (ctx) => {
    isRegistered = false;
    const inlineKeyboard = new InlineKeyboard()
        .text('–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø', 'GetRegister');
    await ctx.replyWithPhoto('https://i.ytimg.com/vi/D4BORFJpqa0/maxresdefault.jpg');
    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üíéMINES V2üíé \n\nüí£ Mines - —ç—Ç–æ –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ \"1WIN\", –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ‚Äú–°–∞–ø—ë—Ä–µ‚Äù.\n–í–∞—à–∞ —Ü–µ–ª—å - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –ª–æ–≤—É—à–∫–∏.\n\n–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç Bitsgap \n–û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 87%.', {
        reply_markup: inlineKeyboard
    });
  });



  bot.on('callback_query:data', async (ctx) => {
    if (ctx.callbackQuery.data === 'GetRegister') {
        const inlineKeyboard = new InlineKeyboard().text('–ü–†–û–í–ï–†–ò–¢–¨ ID', 'CheckId');
        await ctx.replyWithPhoto('https://postimg.cc/BjdJzX6S');
        await ctx.reply('1. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç–µ 1WIN <a href="https://1wdrwn.life/v3/landing-page/casino">CLICK</a>\n2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ c–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç–µ (–í–∫–ª–∞–¥–∫–∞ \'–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\' –∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±—É–¥–µ—Ç –≤–∞—à ID).\n3. –ü–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å id" –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π id', {
            reply_markup: inlineKeyboard,
            parse_mode:'HTML'
        });
    }
    else if (ctx.callbackQuery.data === 'CheckId') {
        isRegistered = true;
    }
  
    if (ctx.callbackQuery.data === 'GetSignal') {
        const SignalKeyboard = new InlineKeyboard()
        .text('–ü–û–õ–£–ß–ò–¢–¨ –°–ò–ì–ù–ê–õ','GetSignalGlav');
    
        const randomIndex = Math.floor(Math.random() * linkArray.length);
        
        const randomLink = linkArray[randomIndex];
        await ctx.replyWithPhoto(randomLink, {
          reply_markup: SignalKeyboard
        });
      }


      if (ctx.callbackQuery.data === 'GetSignalGlav') {
        const SignalKeyboard = new InlineKeyboard().text('–ü–û–õ–£–ß–ò–¢–¨ –°–ò–ì–ù–ê–õ', 'GetSignalGlav');
        
        
        if (ctx.msg.message_id) {
            await ctx.api.deleteMessage(ctx.msg.chat.id, ctx.msg.message_id);
        }
    
        
        let statusMessage = await ctx.reply(`–ó–∞–≥—Ä—É–∑–∫–∞: 1%`);
    
        for (let i = 2; i <= 100; i += 10) {
            
            const randomProgress = Math.floor(Math.random() * 11 + (i > 10 ? i - 10 : 0));
            
            await ctx.api.sendChatAction(ctx.msg.chat.id, 'upload_photo', { progress: randomProgress });
            await new Promise(resolve => setTimeout(resolve, 500));
            await statusMessage.editText(`–ó–∞–≥—Ä—É–∑–∫–∞: ${randomProgress}%`).catch(() => {});;
        }
    
         await statusMessage.editText("–ì–æ—Ç–æ–≤–æ!");

         setTimeout(() => statusMessage.delete().catch(() => {}), 500);


        const randomIndex = Math.floor(Math.random() * linkArray.length);
        const randomLink = linkArray[randomIndex];
    

        const newStatusMessage = await ctx.replyWithPhoto(randomLink, {
            reply_markup: SignalKeyboard
        });
    
        await ctx.api.sendChatAction(ctx.msg.chat.id, 'typing');
    }



  });


  let isRegistered = false;

  bot.hears(/.*/, async function registrationHandler(ctx) {
    const SignalKeyboard = new InlineKeyboard()
    .text('–ü–û–õ–£–ß–ò–¢–¨ –°–ò–ì–ù–ê–õ','GetSignal');
    if (isRegistered) {
        
        if (ctx.message.text.length !== 8 || !/^\d+$/.test(ctx.message.text)) {
            await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        } else {
            await ctx.reply('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', {
              
                reply_markup: SignalKeyboard
                
            });
            isRegistered = false;
        }
    }
  });


  bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
      console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
      console.error("Could not contact Telegram:", e);
    } else {
      console.error("Unknown error:", e);
    }
  });

bot.start()
